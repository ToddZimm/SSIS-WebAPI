// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Query: Executions
//     Last Modified On: 5/7/2023 8:34:17 AM
//     Written By: Todd Zimmerman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SSIS.DataService.SSISDB
{
    #nullable enable

    #region Using Statments

    using SSIS.DataService.SSISDB.Models;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the Executions routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand Executions_BuildCommand(SqlConnection cnn, ExecutionsInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT ex.execution_id ExecutionId
,pkg.package_id PackageId
,ex.folder_name FolderName
,ex.project_name ProjectName
,ex.package_name PackageName
,ex.status Status
,CAST(CASE ex.status
WHEN 1 THEN 'Created'
WHEN 2 THEN 'Running'
WHEN 3 THEN 'Cancelled'
WHEN 4 THEN 'Failed'
WHEN 5 THEN 'Pending'
WHEN 6 THEN 'Ended Unexpectedly'
WHEN 7 THEN 'Succeeded'
WHEN 8 THEN 'Stopping'
WHEN 9 THEN 'Completed'
END AS nvarchar(20)) StatusName
,(SELECT TOP(1) em.message
FROM catalog.event_messages em
WHERE message_type IN(120, 130) -- Error, Task Failed
AND em.operation_id = ex.execution_id
order by message_time, event_message_id
) FirstErrorMessage
,ex.created_time CreatedTime
,ex.start_time StartTime
,ex.end_time EndTime
,ex.environment_folder_name EnvironmentFolder
,ex.environment_name EnvironmentName
,ex.caller_name Caller
,ex.executed_as_name ExecutedAs
,ex.stopped_by_name StoppedBy
,ex.use32bitruntime Use32BitRuntime
FROM catalog.executions ex
INNER JOIN (
SELECT f.name folder_name, pr.name project_name, p.name package_name, p.package_id
FROM catalog.packages p
LEFT JOIN catalog.projects pr on pr.project_id = p.project_id
LEFT JOIN catalog.folders f on f.folder_id = pr.folder_id
) pkg ON pkg.folder_name = ex.folder_name AND pkg.project_name = ex.project_name AND pkg.package_name = ex.package_name
WHERE (@PackageId = 0 OR pkg.package_id = @PackageId)
AND (@StartTime IS NULL OR ex.start_time >= @StartTime)
AND (@EndTime IS NULL OR ex.start_time <= @EndTime)
ORDER BY ex.start_time DESC, ex.execution_id DESC
OFFSET ((@Page - 1) * @PageSize) ROWS
FETCH NEXT @PageSize ROWS ONLY;
SET @Count = @@ROWCOUNT;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Page",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@PageSize",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@PackageId",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Status",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@StartTime",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.DateTime,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@EndTime",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.DateTime,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Count",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            if (input.Page != null)
            {
                result.Parameters["@Page"].Value = input.Page;
            }
            if (input.PageSize != null)
            {
                result.Parameters["@PageSize"].Value = input.PageSize;
            }
            if (input.PackageId != null)
            {
                result.Parameters["@PackageId"].Value = input.PackageId;
            }
            if (input.Status != null)
            {
                result.Parameters["@Status"].Value = input.Status;
            }
            if (input.StartTime != null)
            {
                result.Parameters["@StartTime"].Value = input.StartTime;
            }
            if (input.EndTime != null)
            {
                result.Parameters["@EndTime"].Value = input.EndTime;
            }
            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void Executions_SetParameters(SqlCommand cmd, ExecutionsOutput output)
        {
            if(cmd.Parameters[6].Value != DBNull.Value)
            {
                output.Count = (int?)cmd.Parameters[6].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
        
        private ExecutionsResult Executions_ResultData(SqlDataReader rdr)
        {
            return new ExecutionsResult(
            rdr.GetInt64(0),
            rdr.GetInt64(1),
            rdr.GetString(2),
            rdr.GetString(3),
            rdr.GetString(4),
            rdr.GetInt32(5),
            rdr.IsDBNull(6) ? default : rdr.GetString(6),
            rdr.IsDBNull(7) ? default : rdr.GetString(7),
            rdr.IsDBNull(8) ? default : rdr.GetDateTimeOffset(8),
            rdr.IsDBNull(9) ? default : rdr.GetDateTimeOffset(9),
            rdr.IsDBNull(10) ? default : rdr.GetDateTimeOffset(10),
            rdr.IsDBNull(11) ? default : rdr.GetString(11),
            rdr.IsDBNull(12) ? default : rdr.GetString(12),
            rdr.GetString(13),
            rdr.GetString(14),
            rdr.IsDBNull(15) ? default : rdr.GetString(15),
            rdr.GetBoolean(16)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void Executions_Execute(SqlCommand cmd, ExecutionsOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<ExecutionsResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(Executions_ResultData(rdr));
                }
                rdr.Close();
            }

            Executions_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Returns list of package executions in the SSIS Catalog<br/>
        /// DB Routine: dbo.Executions<br/>
        /// Author: Todd Zimmerman<br/>
        /// </summary>
        /// <param name="input">ExecutionsInput instance.</param>
        /// <returns>Instance of ExecutionsOutput</returns>
        public ExecutionsOutput Executions(ExecutionsInput input)
        {
            ValidateInput(input, nameof(Executions));
            ExecutionsOutput output = new ExecutionsOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = Executions_BuildCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    Executions_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = Executions_BuildCommand(cnn, input))
                    {
                        cnn.Open();
						Executions_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

