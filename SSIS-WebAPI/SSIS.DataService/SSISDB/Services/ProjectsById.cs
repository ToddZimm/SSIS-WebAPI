// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Query: ProjectsById
//     Last Modified On: 5/13/2023 3:58:03 PM
//     Written By: Todd Zimmerman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SSIS.DataService.SSISDB
{
    #region Using Statments

    using SSIS.DataService.SSISDB.Models;
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the ProjectsById routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand ProjectsById_BuildCommand(SqlConnection cnn, ProjectsByIdInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT p.project_id ProjectId
,p.name Name
,p.description Description
,f.folder_id FolderId
,f.name FolderName
,p.deployed_by_name DeployedBy
,p.last_deployed_time LastDeployedAt
,p.created_time CreatedAt
,p.last_validation_time LastValidationAt
,p.validation_status ValidationStatus
FROM catalog.projects p
LEFT JOIN catalog.folders f on f.folder_id = p.folder_id
WHERE project_id = @Id;
IF @@ROWCOUNT = 0
BEGIN
SET @ReturnValue=0;
END;
ELSE
BEGIN
SET @ReturnValue = 1;
END;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Id",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.BigInt,
                Value = input.Id
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void ProjectsById_SetParameters(SqlCommand cmd, ProjectsByIdOutput output)
        {
            if(cmd.Parameters[1].Value != DBNull.Value)
            {
                output.ReturnValue = (ProjectsByIdOutput.Returns)cmd.Parameters[1].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
        
        private ProjectsByIdResult ProjectsById_ResultData(SqlDataReader rdr)
        {
            return new ProjectsByIdResult(
            rdr.GetInt64(0),
            rdr.GetString(1),
            rdr.IsDBNull(2) ? default : rdr.GetString(2),
            rdr.IsDBNull(3) ? default : rdr.GetInt64(3),
            rdr.IsDBNull(4) ? default : rdr.GetString(4),
            rdr.GetString(5),
            rdr.GetDateTimeOffset(6),
            rdr.GetDateTimeOffset(7),
            rdr.IsDBNull(8) ? default : rdr.GetDateTimeOffset(8),
            rdr.GetString(9)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void ProjectsById_Execute(SqlCommand cmd, ProjectsByIdOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                if(rdr.Read())
                {
                    output.ResultData = ProjectsById_ResultData(rdr);
                }
                rdr.Close();
            }

            ProjectsById_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Returns Project by ID in the SSIS Catalog<br/>
        /// DB Routine: dbo.ProjectsById<br/>
        /// Author: Todd Zimmerman<br/>
        /// </summary>
        /// <param name="input">ProjectsByIdInput instance.</param>
        /// <returns>Instance of ProjectsByIdOutput</returns>
        public ProjectsByIdOutput ProjectsById(ProjectsByIdInput input)
        {
            ValidateInput(input, nameof(ProjectsById));
            ProjectsByIdOutput output = new ProjectsByIdOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = ProjectsById_BuildCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    ProjectsById_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = ProjectsById_BuildCommand(cnn, input))
                    {
                        cnn.Open();
						ProjectsById_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

