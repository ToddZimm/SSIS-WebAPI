// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Query: PackageExecutionSummary
//     Last Modified On: 5/7/2023 3:14:36 PM
//     Written By: Todd Zimmerman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SSIS.DataService.SSISDB
{
    #region Using Statments

    using SSIS.DataService.SSISDB.Models;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the PackageExecutionSummary routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand PackageExecutionSummary_BuildCommand(SqlConnection cnn, PackageExecutionSummaryInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT pkg.package_id
,ex.package_name
,ex.project_name
,ex.folder_name
,MIN(ex.start_time) AS FirstExecutionStartedAt
,MAX(ex.start_time) AS LastExecutionStartedAt
,COUNT(*) ExecutionCount
,SUM(CASE WHEN ex.status NOT IN(3, 4, 6) THEN 1 ELSE 0 END) SuccessCount
,SUM(CASE WHEN ex.status IN(3, 4, 6) THEN 1 ELSE 0 END) FailedCount
,AVG(DATEDIFF(SECOND, start_time, end_time)) AverageDurationSeconds
,CASE
WHEN AVG(DATEDIFF(SECOND, ex.start_time, ex.end_time)) < 90
THEN FORMAT(AVG(DATEDIFF(MILLISECOND, ex.start_time, ex.end_time)) / 1000.0, 'N1') + ' seconds'
WHEN AVG(DATEDIFF(SECOND, ex.start_time, ex.end_time)) < 3600
THEN FORMAT(AVG(DATEDIFF(SECOND, ex.start_time, ex.end_time)) / 60.0, 'N1') + ' minutes'
ELSE FORMAT(AVG(DATEDIFF(SECOND, ex.start_time, ex.end_time)) / 60.0 / 60.0, 'N1') + ' hours'
END AS AverageDurationDisplay
FROM catalog.executions ex
INNER JOIN (
SELECT f.name folder_name, pr.name project_name, p.name package_name, p.package_id
FROM catalog.packages p
LEFT JOIN catalog.projects pr on pr.project_id = p.project_id
LEFT JOIN catalog.folders f on f.folder_id = pr.folder_id
) pkg ON pkg.folder_name = ex.folder_name AND pkg.project_name = ex.project_name AND pkg.package_name = ex.package_name
WHERE start_time >= DATEADD(DAY, -1 * @LookbackDays, GETDATE())
GROUP BY pkg.package_id, ex.package_name, ex.project_name, ex.folder_name
SET @Count = @@ROWCOUNT;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@LookbackDays",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Count",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            if (input.LookbackDays != null)
            {
                result.Parameters["@LookbackDays"].Value = input.LookbackDays;
            }
            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void PackageExecutionSummary_SetParameters(SqlCommand cmd, PackageExecutionSummaryOutput output)
        {
            if(cmd.Parameters[1].Value != DBNull.Value)
            {
                output.Count = (int?)cmd.Parameters[1].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
        
        private PackageExecutionSummaryResult PackageExecutionSummary_ResultData(SqlDataReader rdr)
        {
            return new PackageExecutionSummaryResult(
            rdr.GetInt64(0),
            rdr.GetString(1),
            rdr.GetString(2),
            rdr.GetString(3),
            rdr.IsDBNull(4) ? default : rdr.GetDateTimeOffset(4),
            rdr.IsDBNull(5) ? default : rdr.GetDateTimeOffset(5),
            rdr.IsDBNull(6) ? default : rdr.GetInt32(6),
            rdr.IsDBNull(7) ? default : rdr.GetInt32(7),
            rdr.IsDBNull(8) ? default : rdr.GetInt32(8),
            rdr.IsDBNull(9) ? default : rdr.GetInt32(9),
            rdr.IsDBNull(10) ? default : rdr.GetString(10)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void PackageExecutionSummary_Execute(SqlCommand cmd, PackageExecutionSummaryOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<PackageExecutionSummaryResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(PackageExecutionSummary_ResultData(rdr));
                }
                rdr.Close();
            }

            PackageExecutionSummary_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Returns summary execution statistics for each package in SSIS Catalog.<br/>
        /// DB Routine: dbo.PackageExecutionSummary<br/>
        /// Author: Todd Zimmerman<br/>
        /// </summary>
        /// <param name="input">PackageExecutionSummaryInput instance.</param>
        /// <returns>Instance of PackageExecutionSummaryOutput</returns>
        public PackageExecutionSummaryOutput PackageExecutionSummary(PackageExecutionSummaryInput input)
        {
            ValidateInput(input, nameof(PackageExecutionSummary));
            PackageExecutionSummaryOutput output = new PackageExecutionSummaryOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = PackageExecutionSummary_BuildCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    PackageExecutionSummary_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = PackageExecutionSummary_BuildCommand(cnn, input))
                    {
                        cnn.Open();
						PackageExecutionSummary_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

