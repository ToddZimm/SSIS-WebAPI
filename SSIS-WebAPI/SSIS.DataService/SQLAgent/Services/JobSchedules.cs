// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Query: JobSchedules
//     Last Modified On: 5/28/2023 8:07:03 PM
//     Written By: Todd Zimmerman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SSIS.DataService.SQLAgent
{
    #region Using Statments

    using SSIS.DataService.SQLAgent.Models;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the JobSchedules routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand JobSchedules_BuildCommand(SqlConnection cnn, JobSchedulesInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT sched.schedule_id ScheduleId
,sched.name Name
,jobsched.job_id JobId
,j.name JobName
,sched.schedule_uid ScheduleGuid
,CASE sched.enabled
WHEN 1
THEN 'Enabled'
ELSE 'Disabled'
END [Status]
,CASE
WHEN jobsched.next_run_date > 0
THEN CAST(
STUFF(STUFF(CAST(jobsched.next_run_date AS CHAR(8)), 5, 0, '-'), 8, 0, '-') + ' ' +
STUFF(STUFF(RIGHT('000000' + CAST(jobsched.next_run_time AS VARCHAR(6)), 6), 3, 0, ':'), 6, 0, ':')
AS datetime)
ELSE CAST(NULL AS datetime)
END NextRunAt
,CAST(STUFF(STUFF(RIGHT('000000' + CAST(sched.active_start_time AS VARCHAR(6)), 6), 3, 0, ':'), 6, 0, ':') AS time) AS StartTime
,CASE sched.freq_type
WHEN 1
THEN 'Once'
WHEN 4
THEN 'Daily'
WHEN 8
THEN 'Weekly'
WHEN 16
THEN CASE sched.freq_recurrence_factor
WHEN 1
THEN 'Monthly'
ELSE 'Every ' + CONVERT(VARCHAR(10), sched.freq_recurrence_factor) + ' Months'
END
WHEN 32
THEN 'Monthly relative'
WHEN 64
THEN 'When SQL Server Agent starts'
WHEN 128
THEN 'When computer is idle'
END AS Frequency
,CASE sched.freq_type
WHEN 1
THEN 'On ' + LEFT(CONVERT(VARCHAR(10), jobsched.next_run_date), 4) + '-' + SUBSTRING(CONVERT(VARCHAR(10), jobsched.next_run_date), 5, 2) + '-' + RIGHT(CONVERT(VARCHAR(10), jobsched.next_run_date), 2)
WHEN 4
THEN 'Every ' + CONVERT(VARCHAR(10), sched.freq_interval) + ' day(s)'
WHEN 8
THEN 'Every ' + CONVERT(VARCHAR, sched.freq_recurrence_factor) + ' week(s) on ' + LEFT(CASE
WHEN sched.freq_interval & 1 = 1
THEN 'Sunday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 2 = 2
THEN 'Monday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 4 = 4
THEN 'Tuesday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 8 = 8
THEN 'Wednesday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 16 = 16
THEN 'Thursday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 32 = 32
THEN 'Friday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 64 = 64
THEN 'Saturday, '
ELSE ''
END, LEN(CASE
WHEN sched.freq_interval & 1 = 1
THEN 'Sunday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 2 = 2
THEN 'Monday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 4 = 4
THEN 'Tuesday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 8 = 8
THEN 'Wednesday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 16 = 16
THEN 'Thursday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 32 = 32
THEN 'Friday, '
ELSE ''
END + CASE
WHEN sched.freq_interval & 64 = 64
THEN 'Saturday, '
ELSE ''
END) - 1)
WHEN 16
THEN 'Day ' + CONVERT(VARCHAR, sched.freq_interval)
WHEN 32
THEN 'The ' + CASE sched.freq_relative_interval
WHEN 1
THEN 'First'
WHEN 2
THEN 'Second'
WHEN 4
THEN 'Third'
WHEN 8
THEN 'Fourth'
WHEN 16
THEN 'Last'
END + CASE sched.freq_interval
WHEN 1
THEN ' Sunday'
WHEN 2
THEN ' Monday'
WHEN 3
THEN ' Tuesday'
WHEN 4
THEN ' Wednesday'
WHEN 5
THEN ' Thursday'
WHEN 6
THEN ' Friday'
WHEN 7
THEN ' Saturday'
WHEN 8
THEN ' Day'
WHEN 9
THEN ' Weekday'
WHEN 10
THEN ' Weekend Day'
END + ' of every ' + CONVERT(VARCHAR, sched.freq_recurrence_factor) + ' month(s)'
ELSE ''
END AS FrequencyInterval
,CASE sched.freq_subday_type
WHEN 1
THEN 'Once'
WHEN 2
THEN 'Every ' + CONVERT(VARCHAR, sched.freq_subday_interval) + ' Seconds(s) between ' + STUFF(STUFF(RIGHT('000000' + CONVERT(VARCHAR(8), sched.active_start_time), 6), 5, 0, ':'), 3, 0, ':') + ' and ' + STUFF(STUFF(RIGHT('000000' + CONVERT(VARCHAR(8), sched.active_end_time), 6), 5, 0, ':'), 3, 0, ':')
WHEN 4
THEN 'Every ' + CONVERT(VARCHAR, sched.freq_subday_interval) + ' Minute(s) between ' + STUFF(STUFF(RIGHT('000000' + CONVERT(VARCHAR(8), sched.active_start_time), 6), 5, 0, ':'), 3, 0, ':') + ' and ' + STUFF(STUFF(RIGHT('000000' + CONVERT(VARCHAR(8), sched.active_end_time), 6), 5, 0, ':'), 3, 0, ':')
WHEN 8
THEN 'Every ' + CONVERT(VARCHAR, sched.freq_subday_interval) + ' Hour(s) between ' + STUFF(STUFF(RIGHT('000000' + CONVERT(VARCHAR(8), sched.active_start_time), 6), 5, 0, ':'), 3, 0, ':') + ' and ' + STUFF(STUFF(RIGHT('000000' + CONVERT(VARCHAR(8), sched.active_end_time), 6), 5, 0, ':'), 3, 0, ':')
ELSE ''
END AS SubDayFrequency
,CAST(LEFT(CONVERT(VARCHAR(10), sched.active_start_date), 4) + '-' + SUBSTRING(CONVERT(VARCHAR(10), sched.active_start_date), 5, 2) + '-' + RIGHT(CONVERT(VARCHAR(10), sched.active_start_date), 2) AS DATE) ScheduleStartDate
,CAST(CASE
WHEN sched.active_end_date = '99991231'
THEN NULL
ELSE LEFT(CONVERT(VARCHAR(10), sched.active_end_date), 4) + '-' + SUBSTRING(CONVERT(VARCHAR(10), sched.active_end_date), 5, 2) + '-' + RIGHT(CONVERT(VARCHAR(10), sched.active_end_date), 2)
END AS DATE) ScheduleEndDate
,sched.date_created CreatedAt
,sched.date_modified ModifiedAt
FROM msdb.dbo.sysjobschedules jobsched WITH (NOLOCK)
LEFT JOIN msdb.dbo.sysschedules sched WITH (NOLOCK) ON sched.schedule_id = jobsched.schedule_id
LEFT JOIN msdb.dbo.sysjobs j WITH (NOLOCK) ON j.job_id = jobsched.job_id
WHERE jobsched.job_id = @JobId
ORDER BY NextRunAt;
SET @Count = @@ROWCOUNT;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@JobId",
                Direction = ParameterDirection.InputOutput,
                SqlDbType = SqlDbType.UniqueIdentifier,
                Value = input.JobId
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Count",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void JobSchedules_SetParameters(SqlCommand cmd, JobSchedulesOutput output)
        {
            if(cmd.Parameters[0].Value != DBNull.Value)
            {
                output.JobId = (Guid?)cmd.Parameters[0].Value;
            }
            if(cmd.Parameters[1].Value != DBNull.Value)
            {
                output.Count = (int?)cmd.Parameters[1].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
        
        private JobSchedulesResult JobSchedules_ResultData(SqlDataReader rdr)
        {
            return new JobSchedulesResult(
            rdr.IsDBNull(0) ? default : rdr.GetInt32(0),
            rdr.IsDBNull(1) ? default : rdr.GetString(1),
            rdr.IsDBNull(2) ? default : rdr.GetGuid(2),
            rdr.IsDBNull(3) ? default : rdr.GetString(3),
            rdr.IsDBNull(4) ? default : rdr.GetGuid(4),
            rdr.GetString(5),
            rdr.IsDBNull(6) ? default : rdr.GetDateTime(6),
            rdr.IsDBNull(7) ? default : rdr.GetTimeSpan(7),
            rdr.IsDBNull(8) ? default : rdr.GetString(8),
            rdr.IsDBNull(9) ? default : rdr.GetString(9),
            rdr.IsDBNull(10) ? default : rdr.GetString(10),
            rdr.IsDBNull(11) ? default : rdr.GetDateTime(11),
            rdr.IsDBNull(12) ? default : rdr.GetDateTime(12),
            rdr.IsDBNull(13) ? default : rdr.GetDateTime(13),
            rdr.IsDBNull(14) ? default : rdr.GetDateTime(14)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void JobSchedules_Execute(SqlCommand cmd, JobSchedulesOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<JobSchedulesResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(JobSchedules_ResultData(rdr));
                }
                rdr.Close();
            }

            JobSchedules_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Returns list of schedules for a job.<br/>
        /// DB Routine: dbo.JobSchedules<br/>
        /// Author: Todd Zimmerman<br/>
        /// </summary>
        /// <param name="input">JobSchedulesInput instance.</param>
        /// <returns>Instance of JobSchedulesOutput</returns>
        public JobSchedulesOutput JobSchedules(JobSchedulesInput input)
        {
            ValidateInput(input, nameof(JobSchedules));
            JobSchedulesOutput output = new JobSchedulesOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = JobSchedules_BuildCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    JobSchedules_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = JobSchedules_BuildCommand(cnn, input))
                    {
                        cnn.Open();
						JobSchedules_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

