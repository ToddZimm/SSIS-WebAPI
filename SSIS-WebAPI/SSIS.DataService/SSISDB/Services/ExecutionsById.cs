// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Query: ExecutionsById
//     Last Modified On: 7/3/2023 8:41:50 PM
//     Written By: Todd Zimmerman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SSIS.DataService.SSISDB
{
    #region Using Statments

    using SSIS.DataService.SSISDB.Models;
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the ExecutionsById routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand ExecutionsById_BuildCommand(SqlConnection cnn, ExecutionsByIdInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT ex.execution_id ExecutionId
,ISNULL(pkg.package_id, 0) PackageId
,ex.folder_name FolderName
,ex.project_name ProjectName
,ex.package_name PackageName
,ex.status StatusId
,CAST(CASE ex.status
WHEN 1 THEN 'Created'
WHEN 2 THEN 'Running'
WHEN 3 THEN 'Canceled'
WHEN 4 THEN 'Failed'
WHEN 5 THEN 'Pending'
WHEN 6 THEN 'Ended Unexpectedly'
WHEN 7 THEN 'Succeeded'
WHEN 8 THEN 'Stopping'
WHEN 9 THEN 'Completed'
END AS nvarchar(20)) StatusName
,(SELECT TOP(1) em.message
FROM catalog.event_messages em
WHERE message_type IN(120, 130) -- Error, Task Failed
AND em.operation_id = ex.execution_id
order by message_time, event_message_id
) FirstErrorMessage
,ex.created_time CreatedAt
,ex.start_time StartedAt
,ex.end_time EndedAt
,ex.environment_folder_name EnvironmentFolder
,ex.environment_name EnvironmentName
,ex.caller_name CalledBy
,ex.executed_as_name ExecutedAs
,ex.stopped_by_name StoppedBy
,ex.use32bitruntime Use32BitRuntime
,DATEDIFF(SECOND, ex.start_time, ex.end_time) DurationSeconds
,CASE
WHEN DATEDIFF(SECOND, ex.start_time, ex.end_time) < 90
THEN FORMAT(DATEDIFF(MILLISECOND, ex.start_time, ex.end_time) / 1000.0, 'N1') + ' seconds'
WHEN DATEDIFF(SECOND, ex.start_time, ex.end_time) < 3600
THEN FORMAT(DATEDIFF(SECOND, ex.start_time, ex.end_time) / 60.0, 'N1') + ' minutes'
ELSE FORMAT(DATEDIFF(SECOND, ex.start_time, ex.end_time) / 60.0 / 60.0, 'N1') + ' hours'
END AS DurationDisplay
,machine_name ServerName
FROM catalog.executions ex
LEFT JOIN (
SELECT f.name folder_name, pr.name project_name, p.name package_name, p.package_id
FROM catalog.packages p
LEFT JOIN catalog.projects pr on pr.project_id = p.project_id
LEFT JOIN catalog.folders f on f.folder_id = pr.folder_id
) pkg ON pkg.folder_name = ex.folder_name AND pkg.project_name = ex.project_name AND pkg.package_name = ex.package_name
WHERE ex.execution_id = @Id
IF @@ROWCOUNT = 0
BEGIN
SET @ReturnValue=0;
END;
ELSE
BEGIN
SET @ReturnValue = 1;
END;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Id",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.BigInt,
                Value = input.Id
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void ExecutionsById_SetParameters(SqlCommand cmd, ExecutionsByIdOutput output)
        {
            if(cmd.Parameters[1].Value != DBNull.Value)
            {
                output.ReturnValue = (ExecutionsByIdOutput.Returns)cmd.Parameters[1].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
        
        private ExecutionsByIdResult ExecutionsById_ResultData(SqlDataReader rdr)
        {
            return new ExecutionsByIdResult(
            rdr.GetInt64(0),
            rdr.GetInt64(1),
            rdr.GetString(2),
            rdr.GetString(3),
            rdr.GetString(4),
            rdr.GetInt32(5),
            rdr.IsDBNull(6) ? default : rdr.GetString(6),
            rdr.IsDBNull(7) ? default : rdr.GetString(7),
            rdr.IsDBNull(8) ? default : rdr.GetDateTimeOffset(8),
            rdr.IsDBNull(9) ? default : rdr.GetDateTimeOffset(9),
            rdr.IsDBNull(10) ? default : rdr.GetDateTimeOffset(10),
            rdr.IsDBNull(11) ? default : rdr.GetString(11),
            rdr.IsDBNull(12) ? default : rdr.GetString(12),
            rdr.GetString(13),
            rdr.GetString(14),
            rdr.IsDBNull(15) ? default : rdr.GetString(15),
            rdr.GetBoolean(16),
            rdr.IsDBNull(17) ? default : rdr.GetInt32(17),
            rdr.IsDBNull(18) ? default : rdr.GetString(18),
            rdr.IsDBNull(19) ? default : rdr.GetString(19)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void ExecutionsById_Execute(SqlCommand cmd, ExecutionsByIdOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                if(rdr.Read())
                {
                    output.ResultData = ExecutionsById_ResultData(rdr);
                }
                rdr.Close();
            }

            ExecutionsById_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Returns Execution details by ID in the SSIS Catalog<br/>
        /// DB Routine: dbo.ExecutionsById<br/>
        /// Author: Todd Zimmerman<br/>
        /// </summary>
        /// <param name="input">ExecutionsByIdInput instance.</param>
        /// <returns>Instance of ExecutionsByIdOutput</returns>
        public ExecutionsByIdOutput ExecutionsById(ExecutionsByIdInput input)
        {
            ValidateInput(input, nameof(ExecutionsById));
            ExecutionsByIdOutput output = new ExecutionsByIdOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = ExecutionsById_BuildCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    ExecutionsById_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = ExecutionsById_BuildCommand(cnn, input))
                    {
                        cnn.Open();
						ExecutionsById_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

