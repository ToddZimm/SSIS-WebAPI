// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Query: PackageExecutionSummary
//     Last Modified On: 5/17/2023 8:45:42 PM
//     Written By: Todd Zimmerman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SSIS.DataService.SSISDB
{
    #region Using Statments

    using SSIS.DataService.SSISDB.Models;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the PackageExecutionSummary routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand PackageExecutionSummary_BuildCommand(SqlConnection cnn, PackageExecutionSummaryInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SET @LookbackEndsAt = GETDATE();
SET @LookbackStartsAt = DATEADD(DAY, -1 * @LookbackDays, @LookbackEndsAt);
SELECT p.package_id PackageId
,p.name PackageName
,pr.name ProjectName
,f.name FolderName
,ex.FirstExecutionStartedAt
,ex.LastExecutionStartedAt
,ISNULL(ex.ExecutionCount, 0) ExecutionCount
,ex.SuccessCount
,ex.FailedCount
,ex.AverageDurationSeconds
,ex.ShortestDurationSeconds
,ex.LongestDurationSeconds
FROM catalog.packages p
JOIN catalog.projects pr on pr.project_id = p.project_id
JOIN catalog.folders f on f.folder_id = pr.folder_id
LEFT JOIN (
SELECT
exc.package_name PackageName
,exc.project_name ProjectName
,exc.folder_name FolderName
,MIN(exc.start_time) AS FirstExecutionStartedAt
,MAX(exc.start_time) AS LastExecutionStartedAt
,COUNT(*) ExecutionCount
,SUM(CASE WHEN exc.status NOT IN(3, 4, 6) THEN 1 ELSE 0 END) SuccessCount
,SUM(CASE WHEN exc.status IN(3, 4, 6) THEN 1 ELSE 0 END) FailedCount
,AVG(DATEDIFF(SECOND, exc.start_time, exc.end_time)) AverageDurationSeconds
,MIN(DATEDIFF(SECOND, exc.start_time, exc.end_time)) ShortestDurationSeconds
,MAX(DATEDIFF(SECOND, exc.start_time, exc.end_time)) LongestDurationSeconds
FROM catalog.executions exc
WHERE exc.start_time >= @LookbackStartsAt
AND exc.end_time IS NOT NULL
GROUP BY exc.package_name, exc.project_name, exc.folder_name
) ex ON f.name = ex.FolderName AND pr.name = ex.ProjectName AND p.name = ex.PackageName
ORDER BY PackageId;
SET @Count = @@ROWCOUNT;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@LookbackDays",
                Direction = ParameterDirection.InputOutput,
                SqlDbType = SqlDbType.Int,
                Value = input.LookbackDays
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Count",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@LookbackStartsAt",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.DateTime,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@LookbackEndsAt",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.DateTime,
                Value = DBNull.Value
            });

            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void PackageExecutionSummary_SetParameters(SqlCommand cmd, PackageExecutionSummaryOutput output)
        {
            if(cmd.Parameters[0].Value != DBNull.Value)
            {
                output.LookbackDays = (int?)cmd.Parameters[0].Value;
            }
            if(cmd.Parameters[1].Value != DBNull.Value)
            {
                output.Count = (int?)cmd.Parameters[1].Value;
            }
            if(cmd.Parameters[2].Value != DBNull.Value)
            {
                output.LookbackStartsAt = (DateTime?)cmd.Parameters[2].Value;
            }
            if(cmd.Parameters[3].Value != DBNull.Value)
            {
                output.LookbackEndsAt = (DateTime?)cmd.Parameters[3].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
        
        private PackageExecutionSummaryResult PackageExecutionSummary_ResultData(SqlDataReader rdr)
        {
            return new PackageExecutionSummaryResult(
            rdr.GetInt64(0),
            rdr.GetString(1),
            rdr.GetString(2),
            rdr.GetString(3),
            rdr.IsDBNull(4) ? default : rdr.GetDateTimeOffset(4),
            rdr.IsDBNull(5) ? default : rdr.GetDateTimeOffset(5),
            rdr.GetInt32(6),
            rdr.IsDBNull(7) ? default : rdr.GetInt32(7),
            rdr.IsDBNull(8) ? default : rdr.GetInt32(8),
            rdr.IsDBNull(9) ? default : rdr.GetInt32(9),
            rdr.IsDBNull(10) ? default : rdr.GetInt32(10),
            rdr.IsDBNull(11) ? default : rdr.GetInt32(11)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void PackageExecutionSummary_Execute(SqlCommand cmd, PackageExecutionSummaryOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<PackageExecutionSummaryResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(PackageExecutionSummary_ResultData(rdr));
                }
                rdr.Close();
            }

            PackageExecutionSummary_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Returns summary execution statistics for each package in SSIS Catalog.<br/>
        /// DB Routine: dbo.PackageExecutionSummary<br/>
        /// Author: Todd Zimmerman<br/>
        /// </summary>
        /// <param name="input">PackageExecutionSummaryInput instance.</param>
        /// <returns>Instance of PackageExecutionSummaryOutput</returns>
        public PackageExecutionSummaryOutput PackageExecutionSummary(PackageExecutionSummaryInput input)
        {
            ValidateInput(input, nameof(PackageExecutionSummary));
            PackageExecutionSummaryOutput output = new PackageExecutionSummaryOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = PackageExecutionSummary_BuildCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    PackageExecutionSummary_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = PackageExecutionSummary_BuildCommand(cnn, input))
                    {
                        cnn.Open();
						PackageExecutionSummary_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

