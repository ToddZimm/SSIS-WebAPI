// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Query: Jobs
//     Last Modified On: 5/7/2023 4:08:27 PM
//     Written By: Todd Zimmerman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SSIS.DataService.SQLAgent
{
    #nullable enable

    #region Using Statments

    using SSIS.DataService.SQLAgent.Models;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the Jobs routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand Jobs_BuildCommand(SqlConnection cnn)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT
job.job_id JobId,
job.name Name,
svr.name ServerName,
l.name OwnerName,
CASE
WHEN job.enabled = 0 THEN 'Disabled'
WHEN Sched.EnabledScheduleCount = 0 THEN 'Not Scheduled'
WHEN job.enabled = 1 THEN 'Enabled'
END Status,
job.description Description,
category.name Category,
job.date_created CreatedAt,
job.date_modified ModifiedAt,
COALESCE(Sched.ScheduleCount, 0) ScheduleCount,
COALESCE(sched.EnabledScheduleCount, 0) EnabledScheduleCount,
COALESCE(Steps.StepCount, 0) StepCount,
COALESCE(Steps.SSISStepCount, 0) SSISStepCount
FROM msdb.dbo.sysjobs AS job
LEFT JOIN msdb.sys.servers AS svr ON job.originating_server_id = svr.server_id
LEFT JOIN msdb.dbo.syscategories AS category ON job.category_id = category.category_id
LEFT JOIN msdb.sys.syslogins l ON job.owner_sid = l.sid
LEFT JOIN (
SELECT job_id, COUNT(step_id) StepCount,
SUM(CASE WHEN subsystem = 'SSIS' AND command LIKE '/ISSERVER%' THEN 1 ELSE 0 END) SSISStepCount
FROM msdb.dbo.sysjobsteps
GROUP BY job_id
) Steps ON job.job_id = Steps.job_id
LEFT JOIN (
SELECT js.job_id, COUNT(js.schedule_id) ScheduleCount, SUM(s.enabled) EnabledScheduleCount
FROM msdb.dbo.sysjobschedules js
LEFT JOIN msdb.dbo.sysschedules s ON s.schedule_id = js.schedule_id
GROUP BY js.job_id
) Sched ON job.job_id = Sched.job_id
SET @Count = @@ROWCOUNT;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Count",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void Jobs_SetParameters(SqlCommand cmd, JobsOutput output)
        {
            if(cmd.Parameters[0].Value != DBNull.Value)
            {
                output.Count = (int?)cmd.Parameters[0].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
        
        private JobsResult Jobs_ResultData(SqlDataReader rdr)
        {
            return new JobsResult(
            rdr.GetGuid(0),
            rdr.GetString(1),
            rdr.IsDBNull(2) ? default : rdr.GetString(2),
            rdr.IsDBNull(3) ? default : rdr.GetString(3),
            rdr.IsDBNull(4) ? default : rdr.GetString(4),
            rdr.IsDBNull(5) ? default : rdr.GetString(5),
            rdr.IsDBNull(6) ? default : rdr.GetString(6),
            rdr.GetDateTime(7),
            rdr.GetDateTime(8),
            rdr.IsDBNull(9) ? default : rdr.GetInt32(9),
            rdr.IsDBNull(10) ? default : rdr.GetInt32(10),
            rdr.IsDBNull(11) ? default : rdr.GetInt32(11),
            rdr.IsDBNull(12) ? default : rdr.GetInt32(12)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void Jobs_Execute(SqlCommand cmd, JobsOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<JobsResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(Jobs_ResultData(rdr));
                }
                rdr.Close();
            }

            Jobs_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Returns list of SQL Agent Jobs on the server.<br/>
        /// DB Routine: dbo.Jobs<br/>
        /// Author: Todd Zimmerman<br/>
        /// </summary>
        /// <returns>Instance of JobsOutput</returns>
        public JobsOutput Jobs()
        {
            JobsOutput output = new JobsOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = Jobs_BuildCommand(sqlConnection))
                {
                    cmd.Transaction = sqlTransaction;
                    Jobs_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = Jobs_BuildCommand(cnn))
                    {
                        cnn.Open();
						Jobs_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

