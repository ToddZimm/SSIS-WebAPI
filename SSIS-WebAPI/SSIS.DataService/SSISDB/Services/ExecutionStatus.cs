// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Query: ExecutionStatus
//     Last Modified On: 7/3/2023 8:44:06 PM
//     Written By: Todd Zimmerman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SSIS.DataService.SSISDB
{
    #region Using Statments

    using SSIS.DataService.SSISDB.Models;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the ExecutionStatus routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand ExecutionStatus_BuildCommand(SqlConnection cnn)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
WITH val AS (
SELECT CAST(1 AS int) AS [Value]
UNION ALL
SELECT [Value] + 1
FROM val
WHERE [Value] < 9
)
SELECT [Value]
,CAST(CASE [Value]
WHEN 1 THEN 'Created'
WHEN 2 THEN 'Running'
WHEN 3 THEN 'Canceled'
WHEN 4 THEN 'Failed'
WHEN 5 THEN 'Pending'
WHEN 6 THEN 'Ended Unexpectedly'
WHEN 7 THEN 'Succeeded'
WHEN 8 THEN 'Stopping'
WHEN 9 THEN 'Completed'
END AS nvarchar(20)) AS [Name]
,CAST(CASE [Value]
WHEN 1 THEN 'Execution created'
WHEN 2 THEN 'Execution running'
WHEN 3 THEN 'Execution canceled'
WHEN 4 THEN 'Execution failed'
WHEN 5 THEN 'Execution pending'
WHEN 6 THEN 'Execution ended unexpectedly'
WHEN 7 THEN 'Execution succeeded'
WHEN 8 THEN 'Execution stopping'
WHEN 9 THEN 'Execution completed'
END AS nvarchar(50)) AS [Description]
FROM val;",
                Connection = cnn
            };

            return result;
        }

        #endregion Build SqlCommand

        #region Reader To Result Objects
        
        private ExecutionStatusResult ExecutionStatus_ResultData(SqlDataReader rdr)
        {
            return new ExecutionStatusResult(
            rdr.IsDBNull(0) ? default : rdr.GetInt32(0),
            rdr.IsDBNull(1) ? default : rdr.GetString(1),
            rdr.IsDBNull(2) ? default : rdr.GetString(2)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void ExecutionStatus_Execute(SqlCommand cmd, ExecutionStatusOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<ExecutionStatusResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(ExecutionStatus_ResultData(rdr));
                }
                rdr.Close();
            }
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Returns execution status values and descriptions<br/>
        /// DB Routine: dbo.ExecutionStatus<br/>
        /// Author: Todd Zimmerman<br/>
        /// </summary>
        /// <returns>Instance of ExecutionStatusOutput</returns>
        public ExecutionStatusOutput ExecutionStatus()
        {
            ExecutionStatusOutput output = new ExecutionStatusOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = ExecutionStatus_BuildCommand(sqlConnection))
                {
                    cmd.Transaction = sqlTransaction;
                    ExecutionStatus_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = ExecutionStatus_BuildCommand(cnn))
                    {
                        cnn.Open();
						ExecutionStatus_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

