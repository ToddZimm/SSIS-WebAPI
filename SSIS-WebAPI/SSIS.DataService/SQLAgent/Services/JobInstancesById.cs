// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Query: JobInstancesById
//     Last Modified On: 6/3/2023 6:50:15 PM
//     Written By: Todd Zimmerman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SSIS.DataService.SQLAgent
{
    #region Using Statments

    using SSIS.DataService.SQLAgent.Models;
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the JobInstancesById routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand JobInstancesById_BuildCommand(SqlConnection cnn, JobInstancesByIdInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT sjh.instance_id InstanceId
,ISNULL(parent.ParentInstanceId, sjh.instance_id) ParentInstanceId
,sjh.job_id JobId
,j.name JobName
,sjh.step_id StepSequenceId
,sjh.step_name StepName
,step.subsystem Subsystem
,step.command Command
,pkg.PackageId SSISPackageId
,pkg.package_path SSISPackagePath
,ex.execution_id SSISExecutionId
,sjh.message Message
,jt.start_time StartedAt
,jt.end_time EndedAt
,DATEDIFF(SECOND, jt.start_time, jt.end_time) DurationSeconds
,CASE
WHEN DATEDIFF(SECOND, jt.start_time, jt.end_time) < 90
THEN FORMAT(DATEDIFF(SECOND, jt.start_time, jt.end_time), 'N0') + ' seconds'
WHEN DATEDIFF(SECOND, jt.start_time, jt.end_time) < 3600
THEN FORMAT(DATEDIFF(SECOND, jt.start_time, jt.end_time) / 60.0, 'N1') + ' minutes'
ELSE FORMAT(DATEDIFF(SECOND, jt.start_time, jt.end_time) / 60.0 / 60.0, 'N1') + ' hours'
END AS DurationDisplay
,sjh.run_status RunStatusId
,CASE sjh.run_status
WHEN 0 THEN 'Failed'
WHEN 1 THEN 'Succeeded'
WHEN 2 THEN 'Retry'
WHEN 3 THEN 'Canceled'
WHEN 4 THEN 'Step output'
ELSE 'Unknown'
END RunStatusName
,sjh.retries_attempted RetriesAttempted
,sjh.sql_message_id SqlMessageId
,sjh.sql_severity SqlSeverity
,sjh.server Server
,opemail.name OperatorEmailed
,opnet.name OperatorNetSent
,oppage.name OperatorPaged
FROM msdb.dbo.sysjobhistory sjh
OUTER APPLY (
SELECT msdb.dbo.agent_datetime(sjh.run_date, sjh.run_time) AS start_time
,Dateadd(Second, sjh.run_duration % 100 + -- Seconds
(((sjh.run_duration / 100) % 100) * 60) + -- Minutes
((sjh.run_duration / 10000) * 60 * 60), -- Hours
msdb.dbo.agent_datetime(sjh.run_date, sjh.run_time)) AS end_time
) jt
LEFT JOIN msdb.dbo.sysjobs j ON j.job_id = sjh.job_id
LEFT JOIN msdb.dbo.sysjobsteps step ON sjh.job_id = step.job_id and sjh.step_id = step.step_id
LEFT JOIN (
SELECT CAST(f.name + '\' + pr.name + '\' + p.name AS nvarchar(500)) package_path
,p.package_id PackageId
,f.name FolderName
,pr.name ProjectName
,p.name PackageName
FROM catalog.packages p
JOIN catalog.projects pr on pr.project_id = p.project_id
JOIN catalog.folders f on f.folder_id = pr.folder_id
) pkg ON step.command LIKE '%' + pkg.package_path + '%' AND step.subsystem = 'SSIS'
LEFT JOIN (
SELECT jh1.instance_id, MIN(jh2.instance_id) ParentInstanceId
FROM msdb.dbo.sysjobhistory jh1
LEFT JOIN msdb.dbo.sysjobhistory jh2 ON
jh1.job_id = jh2.job_id
AND jh2.instance_id > jh1.instance_id
AND jh2.step_id = 0
WHERE jh1.step_id > 0
GROUP BY jh1.instance_id
) parent ON parent.instance_id = sjh.instance_id
LEFT JOIN SSISDB.catalog.executions ex ON ex.folder_name = pkg.FolderName and ex.project_name = pkg.ProjectName and ex.package_name = pkg.PackageName
AND CAST(ex.start_time AS datetime) >= jt.start_time and CAST(ex.end_time AS datetime) <= jt.end_time
LEFT JOIN msdb.dbo.sysoperators opemail ON opemail.id = sjh.operator_id_emailed
LEFT JOIN msdb.dbo.sysoperators opnet ON opnet.id = sjh.operator_id_netsent
LEFT JOIN msdb.dbo.sysoperators oppage ON oppage.id = sjh.operator_id_paged
WHERE sjh.instance_id = @Id;
IF @@ROWCOUNT = 0
BEGIN
SET @ReturnValue=0;
END;
ELSE
BEGIN
SET @ReturnValue = 1;
END;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Id",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.BigInt,
                Value = input.Id
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void JobInstancesById_SetParameters(SqlCommand cmd, JobInstancesByIdOutput output)
        {
            if(cmd.Parameters[1].Value != DBNull.Value)
            {
                output.ReturnValue = (JobInstancesByIdOutput.Returns)cmd.Parameters[1].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
        
        private JobInstancesByIdResult JobInstancesById_ResultData(SqlDataReader rdr)
        {
            return new JobInstancesByIdResult(
            rdr.GetInt32(0),
            rdr.GetInt32(1),
            rdr.GetGuid(2),
            rdr.IsDBNull(3) ? default : rdr.GetString(3),
            rdr.GetInt32(4),
            rdr.GetString(5),
            rdr.IsDBNull(6) ? default : rdr.GetString(6),
            rdr.IsDBNull(7) ? default : rdr.GetString(7),
            rdr.IsDBNull(8) ? default : rdr.GetInt64(8),
            rdr.IsDBNull(9) ? default : rdr.GetString(9),
            rdr.IsDBNull(10) ? default : rdr.GetInt64(10),
            rdr.IsDBNull(11) ? default : rdr.GetString(11),
            rdr.IsDBNull(12) ? default : rdr.GetDateTime(12),
            rdr.IsDBNull(13) ? default : rdr.GetDateTime(13),
            rdr.IsDBNull(14) ? default : rdr.GetInt32(14),
            rdr.IsDBNull(15) ? default : rdr.GetString(15),
            rdr.GetInt32(16),
            rdr.GetString(17),
            rdr.GetInt32(18),
            rdr.GetInt32(19),
            rdr.GetInt32(20),
            rdr.GetString(21),
            rdr.IsDBNull(22) ? default : rdr.GetString(22),
            rdr.IsDBNull(23) ? default : rdr.GetString(23),
            rdr.IsDBNull(24) ? default : rdr.GetString(24)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void JobInstancesById_Execute(SqlCommand cmd, JobInstancesByIdOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                if(rdr.Read())
                {
                    output.ResultData = JobInstancesById_ResultData(rdr);
                }
                rdr.Close();
            }

            JobInstancesById_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Returns job instance details by ID.<br/>
        /// DB Routine: dbo.JobInstancesById<br/>
        /// Author: Todd Zimmerman<br/>
        /// </summary>
        /// <param name="input">JobInstancesByIdInput instance.</param>
        /// <returns>Instance of JobInstancesByIdOutput</returns>
        public JobInstancesByIdOutput JobInstancesById(JobInstancesByIdInput input)
        {
            ValidateInput(input, nameof(JobInstancesById));
            JobInstancesByIdOutput output = new JobInstancesByIdOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = JobInstancesById_BuildCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    JobInstancesById_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = JobInstancesById_BuildCommand(cnn, input))
                    {
                        cnn.Open();
						JobInstancesById_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

