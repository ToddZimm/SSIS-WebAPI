// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Query: Packages
//     Last Modified On: 7/24/2023 7:19:13 PM
//     Written By: Todd Zimmerman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SSIS.DataService.SSISDB
{
    #region Using Statments

    using SSIS.DataService.SSISDB.Models;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the Packages routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand Packages_BuildCommand(SqlConnection cnn, PackagesInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT p.package_id PackageId
,p.name Name
,p.description Description
,p.project_id ProjectId
,pr.name ProjectName
,f.name FolderName
,p.package_format_version PackageFormatVersion
,p.validation_status ValidationStatus
,p.last_validation_time LastValidationAt
,p.package_guid PackageGuid
,p.version_guid VersionGuid
,p.version_major VersionMajor
,p.version_minor VersionMinor
,p.version_build VersionBuild
,p.version_comments VersionComments
,pr.created_time CreatedAt
,pr.last_deployed_time LastDeployedAt
FROM catalog.packages p
LEFT JOIN catalog.projects pr on pr.project_id = p.project_id
LEFT JOIN catalog.folders f on f.folder_id = pr.folder_id
WHERE (@ProjectId = 0 OR p.project_id = @ProjectId);
SET @Count = @@ROWCOUNT;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ProjectId",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.BigInt,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Count",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            if (input.ProjectId != null)
            {
                result.Parameters["@ProjectId"].Value = input.ProjectId;
            }
            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void Packages_SetParameters(SqlCommand cmd, PackagesOutput output)
        {
            if(cmd.Parameters[1].Value != DBNull.Value)
            {
                output.Count = (int?)cmd.Parameters[1].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
        
        private PackagesResult Packages_ResultData(SqlDataReader rdr)
        {
            return new PackagesResult(
            rdr.GetInt64(0),
            rdr.GetString(1),
            rdr.IsDBNull(2) ? default : rdr.GetString(2),
            rdr.GetInt64(3),
            rdr.IsDBNull(4) ? default : rdr.GetString(4),
            rdr.IsDBNull(5) ? default : rdr.GetString(5),
            rdr.GetInt32(6),
            rdr.GetString(7),
            rdr.IsDBNull(8) ? default : rdr.GetDateTimeOffset(8),
            rdr.GetGuid(9),
            rdr.GetGuid(10),
            rdr.GetInt32(11),
            rdr.GetInt32(12),
            rdr.GetInt32(13),
            rdr.IsDBNull(14) ? default : rdr.GetString(14),
            rdr.IsDBNull(15) ? default : rdr.GetDateTimeOffset(15),
            rdr.IsDBNull(16) ? default : rdr.GetDateTimeOffset(16)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void Packages_Execute(SqlCommand cmd, PackagesOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<PackagesResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(Packages_ResultData(rdr));
                }
                rdr.Close();
            }

            Packages_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Returns list of Packages in the SSIS Catalog<br/>
        /// DB Routine: dbo.Packages<br/>
        /// Author: Todd Zimmerman<br/>
        /// </summary>
        /// <param name="input">PackagesInput instance.</param>
        /// <returns>Instance of PackagesOutput</returns>
        public PackagesOutput Packages(PackagesInput input)
        {
            ValidateInput(input, nameof(Packages));
            PackagesOutput output = new PackagesOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = Packages_BuildCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    Packages_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = Packages_BuildCommand(cnn, input))
                    {
                        cnn.Open();
						Packages_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

