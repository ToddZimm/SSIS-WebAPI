// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Query: Folders
//     Last Modified On: 5/7/2023 1:40:20 PM
//     Written By: Todd Zimmerman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SSIS.DataService.SSISDB
{
    #nullable enable

    #region Using Statments

    using SSIS.DataService.SSISDB.Models;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the Folders routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand Folders_BuildCommand(SqlConnection cnn)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT
folder_id FolderId
,name Name
,description Description
,created_time CreatedAt
,created_by_name CreatedBy
FROM Catalog.Folders;
SET @Count = @@ROWCOUNT;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Count",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void Folders_SetParameters(SqlCommand cmd, FoldersOutput output)
        {
            if(cmd.Parameters[0].Value != DBNull.Value)
            {
                output.Count = (int?)cmd.Parameters[0].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
        
        private FoldersResult Folders_ResultData(SqlDataReader rdr)
        {
            return new FoldersResult(
            rdr.GetInt64(0),
            rdr.GetString(1),
            rdr.IsDBNull(2) ? default : rdr.GetString(2),
            rdr.GetDateTimeOffset(3),
            rdr.GetString(4)
            );
        }
    
        #endregion Reader To Result Objects

        #region Execute Command

        private void Folders_Execute(SqlCommand cmd, FoldersOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<FoldersResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(Folders_ResultData(rdr));
                }
                rdr.Close();
            }

            Folders_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Returns list of folders in the SSIS Catalog<br/>
        /// DB Routine: dbo.Folders<br/>
        /// Author: Todd Zimmerman<br/>
        /// </summary>
        /// <returns>Instance of FoldersOutput</returns>
        public FoldersOutput Folders()
        {
            FoldersOutput output = new FoldersOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = Folders_BuildCommand(sqlConnection))
                {
                    cmd.Transaction = sqlTransaction;
                    Folders_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = Folders_BuildCommand(cnn))
                    {
                        cnn.Open();
						Folders_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

